// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_SENSORS_H_
#define FLATBUFFERS_GENERATED_SENSORS_H_

#include "flatbuffers/flatbuffers.h"

struct Sensors;

struct Sensors FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_NAME = 6,
    VT_MOISTURE = 8,
    VT_TEMPERATURE = 10,
    VT_PRESSURE = 12,
    VT_LIGHT = 14,
    VT_AHUMIDITY = 16,
    VT_WPH = 18,
    VT_WFLOW = 20
  };
  int64_t id() const { return GetField<int64_t>(VT_ID, 0); }
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(VT_NAME); }
  float moisture() const { return GetField<float>(VT_MOISTURE, 0.0f); }
  float temperature() const { return GetField<float>(VT_TEMPERATURE, 0.0f); }
  float pressure() const { return GetField<float>(VT_PRESSURE, 0.0f); }
  float light() const { return GetField<float>(VT_LIGHT, 0.0f); }
  float ahumidity() const { return GetField<float>(VT_AHUMIDITY, 0.0f); }
  float wph() const { return GetField<float>(VT_WPH, 0.0f); }
  float wflow() const { return GetField<float>(VT_WFLOW, 0.0f); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_ID) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<float>(verifier, VT_MOISTURE) &&
           VerifyField<float>(verifier, VT_TEMPERATURE) &&
           VerifyField<float>(verifier, VT_PRESSURE) &&
           VerifyField<float>(verifier, VT_LIGHT) &&
           VerifyField<float>(verifier, VT_AHUMIDITY) &&
           VerifyField<float>(verifier, VT_WPH) &&
           VerifyField<float>(verifier, VT_WFLOW) &&
           verifier.EndTable();
  }
};

struct SensorsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int64_t id) { fbb_.AddElement<int64_t>(Sensors::VT_ID, id, 0); }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(Sensors::VT_NAME, name); }
  void add_moisture(float moisture) { fbb_.AddElement<float>(Sensors::VT_MOISTURE, moisture, 0.0f); }
  void add_temperature(float temperature) { fbb_.AddElement<float>(Sensors::VT_TEMPERATURE, temperature, 0.0f); }
  void add_pressure(float pressure) { fbb_.AddElement<float>(Sensors::VT_PRESSURE, pressure, 0.0f); }
  void add_light(float light) { fbb_.AddElement<float>(Sensors::VT_LIGHT, light, 0.0f); }
  void add_ahumidity(float ahumidity) { fbb_.AddElement<float>(Sensors::VT_AHUMIDITY, ahumidity, 0.0f); }
  void add_wph(float wph) { fbb_.AddElement<float>(Sensors::VT_WPH, wph, 0.0f); }
  void add_wflow(float wflow) { fbb_.AddElement<float>(Sensors::VT_WFLOW, wflow, 0.0f); }
  SensorsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SensorsBuilder &operator=(const SensorsBuilder &);
  flatbuffers::Offset<Sensors> Finish() {
    auto o = flatbuffers::Offset<Sensors>(fbb_.EndTable(start_, 9));
    return o;
  }
};

inline flatbuffers::Offset<Sensors> CreateSensors(flatbuffers::FlatBufferBuilder &_fbb,
   int64_t id = 0,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   float moisture = 0.0f,
   float temperature = 0.0f,
   float pressure = 0.0f,
   float light = 0.0f,
   float ahumidity = 0.0f,
   float wph = 0.0f,
   float wflow = 0.0f) {
  SensorsBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_wflow(wflow);
  builder_.add_wph(wph);
  builder_.add_ahumidity(ahumidity);
  builder_.add_light(light);
  builder_.add_pressure(pressure);
  builder_.add_temperature(temperature);
  builder_.add_moisture(moisture);
  builder_.add_name(name);
  return builder_.Finish();
}

inline const Sensors *GetSensors(const void *buf) { return flatbuffers::GetRoot<Sensors>(buf); }

inline bool VerifySensorsBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<Sensors>(); }

inline void FinishSensorsBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<Sensors> root) { fbb.Finish(root); }


#endif  // FLATBUFFERS_GENERATED_SENSORS_H_
